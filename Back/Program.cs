using Back;
using Back.Models;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// цепляем БД
builder.Services.AddDbContext<AppDBContext>();

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.RequireHttpsMetadata = false;
        options.TokenValidationParameters = new TokenValidationParameters
        {
            // укзывает, будет ли валидироваться издатель при валидации токена
            ValidateIssuer = true,
            // строка, представляющая издателя
            ValidIssuer = AuthOptions.ISSUER,

            // будет ли валидироваться потребитель токена
            ValidateAudience = true,
            // установка потребителя токена
            ValidAudience = AuthOptions.AUDIENCE,
            // будет ли валидироваться время существования
            ValidateLifetime = true,

            // установка ключа безопасности
            IssuerSigningKey = AuthOptions.GetSymmetricSecurityKey(),
            // валидация ключа безопасности
            ValidateIssuerSigningKey = true,
        };
    })
    .AddCookie(); ;
// builder.Services.AddControllersWithViews();

var app = builder.Build();

// TODO пока для первичного пересоздания бд
using (var db = new AppDBContext())
{
    // api/Model/ :
    // (Создание) - POST, вход json с полями, возвращает json объекта
    // (Обновление) - PUT, вход json с полями, возвращает json объекта

    // api/Model/:id
    // (Удаление) - DELETE, вход id в строке, возвращает true
    // (Чтение) - GET, вход id в строке, возвращает true

    // api/Model?параметры_фильтрации (типа http://localhost:57086/Home/Area?altitude=20&height=4)
    // (Списочный) GET, вход в строке, возвращает json массив объектов

    // Для Friendships отдельные методы
    // api/friendship/link - POST, на входе json {From: ид_заявителя, To: ид_кого}, возвращает тип дружбы (0, 1, 2)
    //       Примечание: FirstID < SecondID
    // api/friendship/unlink - POST, на входе json {From: ид_заявителя, To: ид_кого}, возвращает тип дружбы (0, 1, 2)


    // Для Interests уточнение по списочному
    // api/interests?IncludePersons=true в результат добавить массив объектов пользователей

    // Для Persons уточнение по списочному
    // api/persons?IncludeInterests=true в результат добавить массив объектов интересов

    // Для Persons уточнение по списочному
    // сортировка по фамилии по алфавиту

    // Для Messages уточнение по списочному
    // api/messages?Person=123 все входящие и исходящие сообщения отсортированные по дате (сначала новее)
    // также в результате не просто id пользователей, а их объекты
    // пример => [{Id: 1, Text: "Привет", From: { Id: 123, Name: ... }, To: { Id: 124, Name: ... }}, ...]

    db.Database.EnsureDeleted();
    db.Database.EnsureCreated();

    db.Genders.Add(new Gender() { Title = "Мужской" });
    db.Genders.Add(new Gender() { Title = "Женский" });
    db.Genders.Add(new Gender() { Title = "Другой" });

    var rf = new Country() { Title = "Россия" };
    db.Countries.Add(rf);
    db.Countries.Add(new Country() { Title = "Украина" });
    db.Countries.Add(new Country() { Title = "Казахстан" });

    var cityUfa = new City() { Title = "Уфа", Country = rf };
    db.Cities.Add(cityUfa);
    db.Cities.Add(new City() { Title = "Москва", Country = rf });
    db.Cities.Add(new City() { Title = "Чишмы", Country = rf });
    db.Cities.Add(new City() { Title = "Туймазы", Country = rf });

    var demo = new User() { Login = "demo", Password = "demo" };
    db.Users.Add(demo);
    db.Persons.Add(new Person() { Name = "Демо", Surname = "Иванов", User = demo, GenderId = 1, City = cityUfa });

    var demo1 = new User() { Login = "demo1", Password = "demo1" };
    db.Users.Add(demo1);
    db.Persons.Add(new Person() { Name = "Подписчик", User = demo1 });
    db.Friendships.Add(new Friendship() { First = demo.Person, Second = demo1.Person, Direction = FriendDirection.SecondToFirst});


    var demo2 = new User() { Login = "demo2", Password = "demo2" };
    db.Users.Add(demo2);
    db.Persons.Add(new Person() { Name = "Друг", User = demo2 });
    db.Friendships.Add(new Friendship() { First = demo.Person, Second = demo2.Person, Direction = FriendDirection.Both });

    var newUser = new User() { Login = "new", Password = "new" };
    db.Persons.Add(new Person() { Name = "Новый пользователь", User = newUser });

    var interest1 = new Interest() { Title = "Книги" };
    var interest2 = new Interest() { Title = "Музыка" };
    var interest3 = new Interest() { Title = "Кинофильмы" };
    var interest4 = new Interest() { Title = "Танцы" };
    var interest5 = new Interest() { Title = "Видеоигры" };
    db.Interests.Add(interest1);
    db.Interests.Add(interest2);
    db.Interests.Add(interest4);
    db.Interests.Add(interest5);
    demo.Person.Interests.Add(interest1);
    demo.Person.Interests.Add(interest2);

    db.SaveChanges();

    db.Messages.Add(new Message() { Date = new DateTime(), FromId = demo.Id, ToId = demo1.Id, Text = "Привет demo1" });
    db.Messages.Add(new Message() { Date = new DateTime(), FromId = demo.Id, ToId = demo2.Id, Text = "Привет demo2" });
    db.Messages.Add(new Message() { Date = new DateTime(), FromId = demo1.Id, ToId = demo.Id, Text = "Привет demo" });

    db.SaveChanges();
}

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI((options) =>
    {
        //options.SwaggerEndpoint("/swagger/v1/swagger.json", "our super API v1");
        //options.RoutePrefix = string.Empty;
    });
}

// app.UseHttpsRedirection();
app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.UseEndpoints(endpoints =>
{
    endpoints.MapControllers();
});

app.Run();
